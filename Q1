import java.io.IOException;
//import java.io.*;
//import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Alltimehigh {
	  	public static class Mapextend extends Mapper<LongWritable, Text, Text, DoubleWritable>{
	  		public void map(LongWritable key, Text value, Context con ) throws IOException 
	  		{ try
	  		{
	  			String[] str = value.toString().split(",");
	  			Double high=Double.parseDouble(str[5]);
	  			con.write(new Text(str[1]),new DoubleWritable(high));
	  		}
	  		catch(Exception e)
	  		{
	  			System.out.println(e.getMessage());
	  		}
	  		}
 

 }

  public static class Redextend  extends Reducer<Text,DoubleWritable,Text,DoubleWritable> {
   double max=0.00;
   DoubleWritable result= new DoubleWritable();
   public void reduce(Text key, Iterable<DoubleWritable> value, Context con) throws IOException
   { try
   	{
	   for (DoubleWritable val : value)
	   {
		   if (val.get()>max)
				   {
			   		max=val.get();
				   }
	   }
	   result.set(max);
	   con.write(key,result);
   	}
   catch(Exception e)
   {
	   System.out.println(e.getMessage());
   }
   	}
  }

public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "All Time High ");
    job.setJarByClass(Alltimehigh.class);
    job.setMapperClass(Mapextend.class);
    job.setReducerClass(Redextend.class);
    job.setNumReduceTasks(1);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(DoubleWritable.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(DoubleWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}



